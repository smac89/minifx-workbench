import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.InventoryHtmlReportRenderer

buildscript {
    ext {
        CERN_VM = System.getProperty('CERN_TECHNET_VM') ?: System.getenv('CERN_TECHNET_VM') ?: project.findProperty('CERN_TECHNET_VM')
        DEPLOYMENT = System.getProperty('deployment')
        VCS_TAG = System.getProperty('TRAVIS_TAG') ?: System.getenv('TRAVIS_TAG')
        it.'BINTRAY.userName' = System.getProperty('BINTRAY_USER') ?: System.getenv('BINTRAY_USER')
        it.'BINTRAY.apiToken' = System.getProperty('BINTRAY_API_TOKEN') ?: System.getenv('BINTRAY_API_TOKEN')
    }

    if (false) {
        /* Just for testing we disable syc to sonatype, as it is hard to remove things from there */
        ext.'SONATYPE.userName' = System.getProperty('SONATYPE_USER') ?: System.getenv('SONATYPE_USER')
        ext.'SONATYPE.password' = System.getProperty('SONATYPE_PASSWORD') ?: System.getenv('SONATYPE_PASSWORD')
    }

//    repositories {
//        if (CERN_VM) {
//            maven { url 'http://artifactory.cern.ch/ds-jcenter' }
//            maven { url 'http://artifactory.cern.ch/development' }
//        } else {
//            jcenter()
//            maven { url 'https://plugins.gradle.org/m2/' }
//        }
//    }
}

plugins {
    id 'org.openjfx.javafxplugin' version '0.0.7' apply false
    id 'com.jfrog.bintray' version '1.8.4' apply false
    id 'com.github.jk1.dependency-license-report' version '1.5' apply false
    id 'java'
    id 'jacoco'
    id 'application'
    id 'idea'
    id 'eclipse'
}

apply from: 'gradle/buildscript.gradle'
apply from: 'gradle/javafx.gradle'
apply from: 'gradle/jacoco.gradle'
apply from: 'gradle/ide.gradle'
apply from: 'gradle/app.gradle'

group = project.'POM.groupId'

//sourceCompatibility = JavaVersion.VERSION_11
//targetCompatibility = JavaVersion.VERSION_11

dependencies {
    implementation group: 'org.minifx', name: 'minifx-fxml', version: '0.0.2'
    implementation "javax.annotation:javax.annotation-api:1.3.2"

    implementation (group: 'com.google.guava', name: 'guava', version: guavaVersion) {
        exclude module: "jsr305"
    }
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

    implementation group: 'org.springframework', name: 'spring-core', version: springVersion
    implementation group: 'org.springframework', name: 'spring-context', version: springVersion

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.8.+'

    // Dynamically resolved depending on java version
    implementation group: 'de.jensd', name: 'fontawesomefx-fontawesome'
    implementation group: 'de.jensd', name: 'fontawesomefx-commons'

    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.8.+'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.9.1'
    testImplementation group: 'org.testfx', name: 'testfx-core', version: '4.0.15-alpha'
    testImplementation group: 'org.testfx', name: 'testfx-junit', version: '4.0.15-alpha'
    testImplementation (group: 'org.springframework', name: 'spring-test', version: springVersion)
    testImplementation (group: 'org.mockito', name: 'mockito-core', version: '2.24.0') {
        exclude group: 'net.bytebuddy'
    }
    testImplementation ("net.bytebuddy:byte-buddy:1.9.13")
//    testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.8.22'
}

sourceSets {
    main {
        resources { srcDirs 'src/main/java' }
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

//    failFast = true

    if (JavaVersion.current().isJava11Compatible()) {
        jvmArgs '--add-exports=javafx.graphics/com.sun.javafx.application=org.testfx',
//                '--add-opens=minijx-core/org.minifx.workbench.nodes=ALL-UNNAMED',
                '--illegal-access=warn'
    }
}

javadoc {
    options.encoding = "UTF-8"
}

if (!tasks.findByName("javadocJar")) {
    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.convention 'javadoc'
        from javadoc
    }
}

if (!tasks.findByName("sourcesJar")) {
    task sourcesJar(type: Jar) {
        archiveClassifier.convention 'sources'
        from sourceSets.main.allSource
    }
}

if (!CERN_VM) {
    println 'Applying licensing report'
    apply plugin: 'com.github.jk1.dependency-license-report'

    licenseReport {
        renderers = [new InventoryHtmlReportRenderer()]
        filters = [new LicenseBundleNormalizer()]
    }
}

if (DEPLOYMENT) {
    println 'Applying deployment scripts'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply from: 'https://raw.githubusercontent.com/ossgang/gradle-scripts/master/deployment/bintray-deploy.gradle'
}

task printJavaVersion() {
    println 'Java Version: ' + JavaVersion.current()
}

wrapper {
    gradleVersion = '5.5'
    distributionType = Wrapper.DistributionType.ALL
}
